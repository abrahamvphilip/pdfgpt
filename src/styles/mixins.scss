@use "./variables.scss" as *;

@mixin fit {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@mixin responsive-font(
	$min-size: $font-size-min,
	$size: $font-size,
	$limit: $page-limit
) {
	$scale-font-enable: global-variable-exists(scale);

	$unitless-min: strip-unit($min-size);
	$unitless-size: strip-unit($size);
	$baseline: strip-unit($min-mobile);
	$font-multiplier: (
		($unitless-size - $unitless-min) / (strip-unit($limit) - $baseline)
	);
	$font-baseline: ($unitless-min - $font-multiplier * $baseline);

	@if $unitless-min >= $unitless-size {
		@warn 'Responsive font: min-size equal or greater than size';
	}

	font-size: #{$unitless-min}px;

	@if $scale-font-enable == true {
		// stylelint-disable-next-line
		font-size: calc(#{$unitless-min}px * #{var(--scale-font)});
	}

	@media (min-width: $min-mobile) {
		font-size: #{$unitless-min}px;

		@if $scale-font-enable == true {
			// stylelint-disable-next-line
			font-size: calc(
				(#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)) *
					#{var(--scale-font)}
			);
		} @else {
			// stylelint-disable-next-line
			font-size: calc((#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)));
		}
	}

	@media (min-width: $limit) {
		font-size: #{$unitless-size}px;

		@if $scale-font-enable == true {
			// stylelint-disable-next-line
			font-size: calc(#{$unitless-size}px * #{var(--scale-font)});
		}
	}
}

// Alias for responsive-font mixin
@mixin rf($args...) {
	@include responsive-font($args...);
}

@mixin vertically-responsive($property, $number) {
	#{$property}: $number;

	@if global-variable-exists(scale) {
		@supports (--css: variables) {
			#{$property}: calc(#{$number} * var(--scale-element));
		}
	}
}

// Segment customisable per-component / instance rather than being forced to work around defaults.
@mixin segment(
	$padding-top: $segment-padding,
	$padding-bottom: $segment-padding,
	$padding-top-mobile: $segment-padding-mobile,
	$padding-bottom-mobile: $segment-padding-mobile
) {
	flex-grow: 1;

	// Set up unitless values
	$padding-top-mobile-unitless: strip-unit($padding-top-mobile);
	$padding-bottom-mobile-unitless: strip-unit($padding-bottom-mobile);
	$padding-top-unitless: strip-unit($padding-top);
	$padding-bottom-unitless: strip-unit($padding-bottom);

	@include vertically-responsive(
		padding-top,
		$padding-top-mobile-unitless * 1px
	);
	@include vertically-responsive(
		padding-bottom,
		$padding-bottom-mobile-unitless * 1px
	);

	@media (min-width: $min-tablet) {
		@include vertically-responsive(
			padding-top,
			percentage(($padding-top-unitless * 1px) / $page-limit)
		);
		@include vertically-responsive(
			padding-bottom,
			percentage(($padding-bottom-unitless * 1px) / $page-limit)
		);
	}

	@media (min-width: $page-limit) {
		@include vertically-responsive(padding-top, $padding-top-unitless * 1px);
		@include vertically-responsive(
			padding-bottom,
			$padding-bottom-unitless * 1px
		);
	}
}

@mixin container() {
	flex-grow: 1;

	margin: 0 auto;
	padding-left: $container-gutter-mobile;
	padding-right: $container-gutter-mobile;

	max-width: $page-width + $container-gutter-mobile;

	@media (min-width: $min-mobile) {
		max-width: $page-width + $container-gutter-mobile * 2;
	}

	@media (min-width: $min-tablet) {
		padding-left: $container-gutter-tablet;
		padding-right: $container-gutter-tablet;
		max-width: $page-width + $container-gutter-tablet * 2;
	}

	@media (min-width: $min-desktop) {
		padding-left: $container-gutter-desktop;
		padding-right: $container-gutter-desktop;
		max-width: $page-width + $container-gutter-desktop * 2;
	}
}

@mixin js-only {
	html:not(:global(.no-js)) & {
		@content;
	}
}

@mixin no-js {
	html:not(:global(.js)) & {
		@content;
	}
}

@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.3),
		only screen and (-o-min-device-pixel-ratio: 13/10),
		only screen and (min-resolution: 120dpi) {
		@content;
	}
}

// Gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {
	@include js-only {
		@if $opacity == true {
			opacity: 0;
		}

		@if $transform == true {
			will-change: opacity, transform;
		} @else {
			will-change: opacity;
		}
	}
}

@mixin reset-all {
	padding: 0;
	margin: 0;

	font-family: inherit;
	font-style: inherit;
	font-size: inherit;
	font-weight: inherit;
	line-height: inherit;

	vertical-align: baseline;

	border: 0;
}

@mixin reset-button {
	@include reset-all;

	background: transparent;
	appearance: none;

	&:focus {
		outline: none;
	}
}

//project specific mixins

@mixin colImage($direction: left, $heroOffset: 190px, $scale: false) {
	@if $direction == left {
		margin-left: -$gutter;

		@media (min-width: $min-tablet) {
			margin-left: -$container-gutter-tablet;
		}

		@media (min-width: $min-desktop) {
			margin-left: -$container-gutter-desktop;
		}

		@media (min-width: (($page-width + $heroOffset) - 50px)) {
			margin-left: calc((100vw - #{$page-width}) / -2);
		}

		@if $scale == false {
			@media (min-width: 1670px) {
				margin-left: -$heroOffset;
			}
		}
	}

	@if $direction == right {
		margin-right: -$gutter;

		@media (min-width: $min-tablet) {
			margin-right: -$container-gutter-tablet;
		}

		@media (min-width: $min-desktop) {
			margin-right: -$container-gutter-desktop;
		}

		@media (min-width: (($page-width + $heroOffset) - 50px)) {
			margin-right: calc((100vw - #{$page-width}) / -2);
		}

		@if $scale == false {
			@media (min-width: 1670px) {
				margin-right: -$heroOffset;
			}
		}
	}
}

@mixin heading($min: 32, $max: 52) {
	@include responsive-font($min, $max);

	font-family: $font-heading;
	font-weight: 200;
	line-height: 1.075;
	letter-spacing: -0.025em;

	color: $color-font-black;
}

@mixin subheading($min: 32, $max: 52) {
	@include responsive-font($min, $max);

	font-family: $font-heading;
	font-weight: 100;
	line-height: 1.075;
	letter-spacing: -0.035em;

	color: $color-font-gray;
}

@mixin copy($min: 16, $max: 20) {
	@include responsive-font($min, $max);

	font-family: $font-family;
	font-weight: 400;
	line-height: 1.5;
	letter-spacing: 0.02em;

	color: $color-font-black;
}

@mixin tags($min: 13, $max: 14) {
	@include responsive-font($min, $max);

	font-family: $font-family;
	font-weight: 500;
	line-height: 1.5;
	letter-spacing: 0.02em;

	color: $color-font-gray;

	text-transform: capitalize;
}

// need to change this ->
@mixin anchor($min: 14, $max: 16) {
	@include responsive-font($min, $max);

	font-family: $font-family;
	font-weight: 300;
	line-height: 1.5;
	letter-spacing: 0;

	color: $color-font-gray;
}
